known, formal methods. The discussion is conducted with particular reference to three elements
in the foundations of computer scienceâ€”not as an exhaustive list, but to give the reader a broader nee)
understanding of the place AR theory occupies in computing theory. We show how AR theory :
supplements refinement and reification, allowing upwards/downwards simulation diagrams to be a]
embedded in physical computing devices. We touch on the category-theoretic underpinnings DNS
of such diagrams, and consider also the relationship to the interactions between concrete and [=
abstract semantics given by Abstract Interpretation. By grounding computer science in the physical [8
world, questions of ontology and semantics for computational formal systems can also be .
addressed, and we will focus in particular on lambda calculi in this regard.

In the presence of AR theory, computer science becomes the natural science of the computing
abilities of physical systems. While seemingly a very different foundational view of computing,
it is in fact a supplement to, rather than a repudiation of, standard computability theory. It
is a theory of computing to add to our current theories of computation. AR theory allows
more physical devices, both individually and as heterotic systems, to be brought under the
umbrella of abstract computation theory, while remaining agnostic about questions around their
universality and/or Turing completeness. The addition of AR theory to the standard toolkit of
computer science promises to greatly increase our power to reason about complex computational
physical devices.

2. Basic elements of Abstraction/Representation Theory

AR theory was introduced in [14], with that paper giving the full physical and philosophical
background for the framework. The present paper is concerned with its formalization for
use specifically in computer science. That previous work should be referenced for questions