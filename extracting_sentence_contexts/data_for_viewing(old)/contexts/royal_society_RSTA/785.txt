world C++ code. Unfortunately, the whole-program nature of the property makes sure that it is
unlikely to apply in practice: the restrictions on the use of concurrency primitives apply not only
to P but to C too.

With the approach imagined here, we can state a much more usable property, composing
race-free and concurrency-feature-restricted component P with a context that is not restricted, C,
while maintaining the ability to reason about P using SC verification tools. We call this property
component SC,

[P-C]c++ E [Plsc # [C]o++-

Component SC strengthens the memory model that underlies P, so that with some adaptation
we may now use SC logics like CoLoSL [32] for validating properties of P. In fact, there is a range
of state-of-the-art concurrent logics with weaker underlying memory models (e.g. OGRA [33],
RSL [34], FSL [35], GPS [36]). Our imagined denotational approach allows one to choose the ideal
model for each component: strong enough to use a less intricate logic, yet weak enough to admit
a high-performance implementation.

6. Conclusion

Recent work has made tremendous strides in understanding the exotic behaviours exhibited
by mainstream concurrent systems. A robust method for measuring, modelling and verifying
the goals of each concurrency design has emerged, and techniques developed in academia
are having strong impacts on industrial practice. The result is a series of rapidly improving
models of the concurrency of individual processors and programming languages. This relaxed-