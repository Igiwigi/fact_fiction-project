is the field of program synthesis, where the goal is to generate computer programs that
satisfy a given specification. Programs can be mapped to mathematical proofs by encoding
mathematical propositions as types and proofs as programs. This is known as the Curry-Howard
correspondence, which we explore in more depth in §4. An important insight of recent program
synthesis systems, such as DreamCoder [21], is that learning to search for programs can be
interspersed with library learning, whereby the synthesizer extracts useful reusable patterns—
abstractions—from programs that it managed to synthesize. When solving a family of related
problems, discovering abstractions can drastically reduce the difficulty of harder problems: even
complex programs can have short implementations in terms of the appropriate library. This
insight has a direct interpretation in the land of mathematical reasoning: the difficulty of a
mathematical problem also heavily depends on the ‘library’—of existing lemmas or tactics. Given

1m fact, in modern proof assistants such as Isabelle /HOL, SMT solvers can be called to find proofs for sub-problems that are
expressible in a theory they support.


[SEE] substitution and [CLT] Combining
evaluating expressions Like Terms
Evaluate an expression using Simplify an expression using
substitutions and performing properties of the operations
basic operations with constants. and calculations when applicable.
Evaluation Commutativit
a=10x6-9 f—— a=(10+x)-5 Sf y
(5-2)=3 (0 +x) = (e+ 10) ~ _, Substitution
a=10x3 a=(v+10)-5 —~