the x86 ISA in a way that allows both formal analysis and efficient execution of x86 machine-code. : 3

8. Strengths and weaknesses of ACL2 from an industrial perspective :f

In this section, we discuss a few very high-level aspects of ACL2 that are important to industry,
especially Centaur. :3

As noted, one of the main features making ACL2 suitable for industrial use is that it provides :&
an integrated programming and verification environment for a competitive ANSI standard :
programming language, Common Lisp. ACL2 inherits Lisp’s convenience for rapid prototyping,
implementing other languages and building powerful extensions.!° ACL2 also inherits Lisp’s
syntax, which we believe is an advantage. Every expression is fundamentally a Lisp object; this
fact eases the tasks of extending the syntax with powerful macros and of writing other symbolic
manipulation tools.

ACL2 is enormously complicated by the commitment to stay true to the Common Lisp the
Language specification [1] aka ‘CLtL’. The logic would be simpler if the ACL2 developers could
change some things about CLtL—the confusion of NIL and false, the difference between ‘it is an
error’ and ‘an error shall be signaled’ [1, pp. 5-6], the complexity of the symbol package system,
the restrictions on what can be in a compiled file, and the handling of macros, to name but a
few. But by adhering to the CLtL standard ACL2 users can take advantage of six independent
implementations (GCL, CCL, SBCL, Allegro, CMU Lisp and LispWorks) that run on a wide
variety of hardware and OS platforms. These provide a wide range of development, debugging
and browsing tools, along with a community of compiler implementors who strive (indeed,
compete) to provide exceptional execution efficiency, robustness and capacity.