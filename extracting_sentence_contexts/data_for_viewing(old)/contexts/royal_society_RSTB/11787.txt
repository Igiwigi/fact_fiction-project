synchronize the data model underlying the UI with a applications in neuroscience: OSB, VFB, NEURON-UI and
custom Python model. This functionality is at the heart of NetPyNE-UI described here, as well as Patient H.M. [39],
both NEURON-UI and NetPyNE-UI and means any change WormSim [41] and SciDash [44].
made to the Python kernel is immediately reflected in the Neuroscience applications are typically developed inde-
UI and vice versa. pendently, to address a specific requirement. This leads to
Although NEURON-UI and NetPyNE-UI share the same considerable redundancy with the same functionality being
architecture (figure 4 gives an overview of the Geppetto com- redesigned and implemented over and over again [59-65].
ponents used in NetPyNE-UI), they differ in certain aspects. In This approach is only justifiable when the shared set of fea-
NEURON-ULI, the graphical interface is created using a custom tures is negligible. In this paper, we have shown that even
Python API meant to mimic NEURON’s Interviews-based for applications whose requirements were specified indepen-
API. The panels, buttons and text boxes in the UL are therefore dently and had minimal overlap, there can be a significant
created from Python and mapped to Geppetto UI components degree of shared infrastructure. Geppetto proposes an
(figure 7a). These components are then connected to the alternative approach by exploiting this fact, allowing neuro-
internal Geppetto API to visualize the cells and the networks, science applications to be built from reusable modules—as
run the simulations and plot the results. The idea behind this illustrated by the overlapping blocks in figures 2-4. This
approach was to retain backward compatibility with the strategy fits naturally into the open-source model—
numerous existing NEURON interfaces built with Interviews components and modules are more likely to be reusable
for various models. Our future aim is to fully map the compared to monoliths—making Geppetto a flexible and
NEURON API to our NEURON-UI, therefore providing a extensible solution for multiple applications in neuroscience.
comprehensive alternative to the traditional UI. As middleware that factors out commonalities between
By contrast, in NetPyNE-UI, the UI is defined entirely in different domains, Geppetto’s modular structure enables a
JavaScript inside its Geppetto extension. This offers a flexible high level of reuse, allowing developers to skip to writing
and intuitive way to create advanced layouts while still only code specific to their neuroscience application resulting
enabling each of the elements of the interface to be synchro- in a considerable saving of time. As with all software
nized with the Python model. The UI splits the workflows platforms, Geppetto has its own learning curve required