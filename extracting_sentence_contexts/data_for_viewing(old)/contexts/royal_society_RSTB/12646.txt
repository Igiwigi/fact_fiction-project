where the last approximation is valid for K,, > 1. The fit to opment of complex software, where new code shares common
the exponent is particularly good for these fat-tailed distri- traits with previously created elements. Duplicate code is
butions using the accumulated form. For the software reused at different scales, including large blocks containing
graphs discussed here, the in-degree distribution has a millions of lines of code. Useful blocks deal with specific tasks
characteristic value very close to y 2 in all the analysed sys- and they are often encapsulated in well-defined software
tems [60]. This is consistent with the pervasiveness of scaling modules. Internally, these modules comprise sets of densely
laws in software graphs, which seems largely independent of interconnected software elements [69,70]. Since they are sophisti-
the choice of programming languages and/or specific cated structures, once a block has been created, a large part of its
functional traits [58,65-67]. structure is more likely to be reused in the future. As the system
What is the origin of these patterns? Why are they so becomes more complex, programmers rely more frequently on
close, despite the obvious dissimilarities to be expected duplication (also known as cloning), since they know from
from different engineering projects? The response is provided experience that these structures are quite stable and behave
through two arguments. One is the known fact that software well. Empirical analysis of software evolution confirms that
projects, as much as they are planned and serve to a given duplicate codes are more stable than non-duplicated
objective, are developed by engineers who create a system codes [71]. In this way, the software dependency network
that grows over time. Diverse parts of the system are created grows in an increasingly complex and integrated way, and

by programmers with a good picture of the global organiz- their interdependencies naturally lead to reuse (figure 2a).
ation and the different parts that need to be assembled, in The universal class of structural patterns obtained by

principle, following well-defined principles [68]. But, as the duplication rules is consistent with the hierarchical


architecture of software networks. Although human minds consciously plans for the future cannot avoid tinkering when | 6 |
