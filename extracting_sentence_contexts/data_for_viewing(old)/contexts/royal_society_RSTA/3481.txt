swept under the carpet. For example, one project had a particularly challenging need for
concurrency, so we modelled the proposed software design in CSP [2] and used the FDR

[3] model-checker to verify key properties of the design. Many mistakes were discovered

and corrected. This was all done long before coding was attempted.

The elements of this strategy are interlinked. By taking small steps, each step-by-step
verification activity is correspondingly small and manageable. By using precise notations, each
verification step can be trustworthy and amenable to automation, and there are no gaps for
defects to hide in. By doing tool-supported verification, we reduce the element of human error. By
addressing risks first, we eliminate the most error-prone areas first. Testing is still important, but
it becomes a demonstration of correctness, not a mechanism for finding defects. In fact, defects
found in testing are indicative of a failure of an earlier verification step, and hence imply a need
to fix the process as well as the system.

Our confidence in this strategy, underpinned by years of deploying it and monitoring the
resulting data, allows us to offer a warranty on our software. Small print applies, but basically
we fix defects for free. We call our strategy ‘Correctness-by-Construction’ [4].

Deployment of Correctness-by-Construction on specific projects requires the support of a
range of tools and techniques, which we describe below.

(b) Toolbox
