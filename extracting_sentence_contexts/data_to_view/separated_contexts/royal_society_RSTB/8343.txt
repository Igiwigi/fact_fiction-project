Three examples of simple finite-state automata and
tape of infinite length, and thus we could never build a their stringsets. Circles Tepresent states, arcs represent tran-
real Turing machine. Many automata, although well- sitions between states, with the corresponding symbols,
defined in theory, are unbuildable in practice (a fact and double circles indicate ‘accept’ states. (a) The (ab)* or

; . ae . . (ab)”: accepts strings of zero or more ‘ab’ bigrams. (b) The
that has some implications that we will discuss later). a*b*: accepts any number of ‘a’s followed by any number

Despite this, the abstract notion of a Turing machine of ‘b’s. (c) A long-distance dependency: this automaton illus-
is extremely important and powerful in mathematics trates that FSAs can also check for arbitrarily long-distance

and FLT: infinity is a powerful tool for mathemati- dependencies. This grammar accepts strings of the form
cal abstraction, but not a real thing that we find in ab*a, where any number of ‘b’s can intervene between the
the world. two ‘dependent’ ‘a’s, (or similarly for cd*c strings). The simplest class of well-defined automata are
called finite-state automata because they have a finite
number of operating states or ‘positions’.