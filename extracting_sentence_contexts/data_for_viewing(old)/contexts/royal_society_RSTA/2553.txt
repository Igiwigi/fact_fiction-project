from scratch. What we need are canonical proof objects whose correctness can be checked in
polynomial time.

For (multiplicative) linear logic, this goal was achieved by Girard’s proof nets [63], where the
basic idea is essentially the same as for matings—keep the information about which atom pairs
meet in an axiom link. But because of linearity, checking correctness can be done in polynomial
time. In order to obtain this property for classical logic, we have to keep track of the places
in the proof where duplication and erasure of atoms can happen. The first attempt to do this
was through the notion of atomic flow [64,65], but unfortunately, no polynomial-time checking
algorithm has been found so far, and it is very likely that it cannot exist [66].

An alternative approach is to completely separate in a proof the purely linear part and
the duplication/erasure part, as it is done in Hughes’ combinatorial proofs [67]. In fact, for the
very restrictive case of classical proposition logic, combinatorial proofs meet all four objectives
discussed in §2. For this reason, I will give here more technical details.

The example in figure 4 shows the combinatorial proof corresponding to the syntactic proofs
in figures 1 and 2. In other words, all these proofs are identified, as demanded in §2d.

7The problem is co-NP complete.

8In this article, I will follow the presentation in [68,69], and I refer the reader to these papers for more details.


ea