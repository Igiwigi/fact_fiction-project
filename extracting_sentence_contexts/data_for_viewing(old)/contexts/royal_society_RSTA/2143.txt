(iii) The orchestrator features direct connections to every other component to allow it to execute its function. (iv) In practice, the
associative memory would probably be able to receive queries from any buffer without having to go through the CoPU. (Online
version in colour.)

is the colour of a cumulus’ it should be able to replace ‘cumulus’ with ‘cloud’ and try answering
again. Overall, we observe that the system is reminiscent of a massively parallel (hypervector-
based) but otherwise broadly standard SIMD (Singe Instruction, Multiple Data) computer whose
operation can be naturally described by an assembly-like dialect.

Now let us set up the example task. The system is asked: ‘What is the dollar of
Japan?’. The system’s knowledge base is assumed to include all necessary items, for example:
‘currency = superset*dollar’ and ‘Yen =Japan*currency’, i.e. it knows that the dollar is a subset
of the concept of a currency, that the currency of Japan is, in fact, the Yen and all other relevant
facts. Under these conditions a possible succession of steps used by the overall ‘cognitive’ system
to solve the query is shown in table 4.

The system begins by loading the keywords of the query into its buffers INA and INB (step 1).
Then it uses the CoPU to bind them together into a query (s2) which is subsequently sent to
the memory for association extraction (s3). The memory returns a miss indicating no direct
association between the semantic objects ‘Dollar’ and ‘Japan’, so the orchestrator uses prior
knowledge to attempt a new solution. It asks the memory to fetch the concept of a super-set
(s4), uses the CoPU to create a new query (s5) and then sends that into memory (s6). The memory
returns the association ‘Currency’ and the orchestrator reformulates the question as ‘What is the
currency of Japan?’ (s7). The CoPU forms the query (s8) and sends it to the memory (s9), which,
in turn, returns the answer ‘Yen’.