initial state q° € Start; from which g; emerges must be an ordinary state;

(ii) an ordinary function g; can process a symbol from IN; if one is present, or it can proceed
by ignoring the input value in which case the content of IN; remains unchanged. A similar
behaviour is expected for the OUT; port; and

(iii) after a communicating function is applied, the machine state will be an ordinary one, and
so the next function to be applied (if any) will also be ordinary.


(c) X-machine testing

The fact that an SXM can be regarded as an augmented version of its associated automaton
means that well-established automated FSM test-set generation strategies (e.g. based on Chow’s
W-method [26]) can be ‘lifted’ to provide SXM testing strategies. The goal of SXM testing is to
establish whether two SXMs, S (the specification) and T (the implementation under test, or IUT)
compute the same behaviour. We assume that the complete structure of S is known and that S
has been minimized, that S and T use the same set Procs of processing functions (if not, we define
Procs to be the union of their respective process sets), and attempt to find a finite test set, Tests C In*,
with the property that, if [|S[](t) = |Z((#) for every t € Tests, then S and Z must necessarily compute
the same relation. In general, the ability to store data in memory during a computation means
that this problem is well known to be uncomputable; it is therefore necessary to impose certain :
constraints, called design for test (DFT) conditions, as to which implementations TZ are considered :2
valid candidates for testing. In particular, we generally assume that some estimate is available as : =
to how many extra states Z has relative to S. : Pe