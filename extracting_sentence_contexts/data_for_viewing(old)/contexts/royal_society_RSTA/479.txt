THE ROYAL SOCIETY source are credited.

PUBLISHING


and became shattered with the difficulty of doing anything interesting in that direction’.
Influenced by ideas of Floyd [2] and Hoare [3], Milner tried to use his theorem prover to verify
the correctness of programs by generating logic formulae with the property that if the formulae
are true then the programs from which they were generated are correct. Quoting again from
Berger’s interview: ‘I generated verification conditions from programs. But then it took ages to
prove them. My theorem-prover couldn’t do it’. At that time, Robinson’s resolution method for
automatically proving first-order logic formulae [4] was very influential. Berger quotes Milner as
saying ‘I greatly admired Robinson’s resolution principle, a wonderful breakthrough, but, in fact,
the amount of stuff you can prove with fully automatic theorem proving is still very small. So, I
was always more interested in amplifying human intelligence than I am in artificial intelligence’.
In 1970, Milner had an opportunity to explore this interest at the Stanford Artificial Intelligence
Laboratory, where he took a job as a research associate working for John McCarthy.

(a) Stanford logic of computable functions

Before moving to Stanford, Milner had visited Oxford to hear Dana Scott speak on his theory of
domains. This theory was creating enormous excitement as, in combination with earlier ideas
of Strachey [5], it provided a rigorous foundation for a new approach to the mathematical
semantics of programing languages [6]. Scott had also invented a logic of domains for reasoning
about recursive functions [7] and Milner ‘realised that I could write down the syntax of a