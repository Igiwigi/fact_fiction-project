
ACL2 is enormously complicated by the commitment to stay true to the Common Lisp the
Language specification [1] aka ‘CLtL’. The logic would be simpler if the ACL2 developers could
change some things about CLtL—the confusion of NIL and false, the difference between ‘it is an
error’ and ‘an error shall be signaled’ [1, pp. 5-6], the complexity of the symbol package system,
the restrictions on what can be in a compiled file, and the handling of macros, to name but a
few. But by adhering to the CLtL standard ACL2 users can take advantage of six independent
implementations (GCL, CCL, SBCL, Allegro, CMU Lisp and LispWorks) that run on a wide
variety of hardware and OS platforms. These provide a wide range of development, debugging
and browsing tools, along with a community of compiler implementors who strive (indeed,
compete) to provide exceptional execution efficiency, robustness and capacity.

The fact that ACL2’s logic is ‘just’ a programming language may have an unexpected impact
on its perceived effectiveness: users do not try to do things that are wildly outside its strengths.

Common Lisp is syntactically untyped. But CLtL is riddled with runtime restrictions on the
domains of the primitives (e.g. the function + ‘requires that its arguments all be numbers’ [1,
p- 295]); violations of these restrictions result in unspecified behavior. ACL2’s axioms complete
the specifications of the primitives. Thus, ACL2 cannot trust Common Lisp to evaluate an
expression according to the axioms unless the runtime restrictions are satisfied. This issue is
handled by ACL2’s notions of guards (see :DOC guard) which may be used to annotate code
via Common Lisp’s compiler declarations. ACL2 guard verification is essentially type checking via
proof; a function whose guards have been verified is run directly in Common Lisp, otherwise it
is interpreted in accordance with the axioms. Centaur and other companies routinely use guards
extensively both to type check their ACL2 routines and to attain Common Lisp execution speeds