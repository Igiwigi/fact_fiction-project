However, algorithms that relax or remove
conventional synchronization-enforcing paradigms can achieve higher performance on many-
core and accelerator architectures. An example is incomplete factorization (ILU) preconditioners
where the synchronizations of a truncated Gaussian elimination process allows for only limited
parallelization via level scheduling, notoriously resulting in low performance. Based on the
observation that incomplete factorizations as used for preconditioning are typically only a rough
approximation of the exact factorization and the fact that for a given sparsity pattern S of the
ILU, the incomplete factorization is exact in the locations of S [12], it is possible to formulate
the search for values in the incomplete factors as an iterative process [13]. In an element-wise


identify locations
with non-zero ILU
residual

compute ILU
residual and check
convergence

fixed-point sweep
approximates
incomplete factors

ParlLUT cycle

add locations to
sparsity pattern of
incomplete factors

remove smallest
elements from
incomplete factors

select a threshold fixed-point sweep

separating smallest approximates
elements incomplete factors

Figure 1. Iterative ParlLUT algorithm for computing incomplete factorizations based on thresholding via a parallel process. id
(Online version in colour.) a

parallel fixed-point iteration of the form (L, U) = F(A, L, U), the unknowns |; in L and uj in U can
be approximated via

j-l
1 . .
ly=—lay- olny), i>), (2.1)
“ij k=1
iv
uj =a — Do linuay, i<j (2.2)
kal
and lg=L isj. (2.3)

Aside from the theoretical proof that the fixed-point iteration updating all values in the
incomplete factors converges (for a suitable initial guess) in the asymptotic sense [13],
experiments using this ParILU algorithm in highly parallel environments reveal that a few
sweeps are often sufficient to generate preconditioners competitive in terms of quality to those
generated via the (sequential) truncated Gaussian elimination process [13-15].