0.2
a 0 a
0 1 2 3 4
Sahni-k

Figure 1. Human performance in the 0-1 knapsack problem. (a) Task interface. In this example, there are five items that differ in their values and weights. The
goal is to find the subset of available items that maximizes total value of the knapsack, subject to a capacity constraint of 7. In this relatively simple example, the
optimal solution contains items 1 and 3. (b) Mean success rates across attempts of instances, stratified by Sahni-k level. Blue lines, standard errors of means.
(Reproduced from Murawski and Bossaerts [35].) (Online version in colour.)

These results on the computational complexity of 0-1 knapsack problem [48]. Intuitively, the Sahni algorithm
instances do not rely on a particular computational model works as follows. Firstly, it computes all subsets of items of
or algorithm. The fact that it has been possible to relate com- cardinality k that can be formed from the set of available
putational resource requirements of instances to particular items. Then it considers each of these subsets and uses the
properties of instances indicates that computational complex- greedy algorithm to fill the remainder of the knapsack to
ity may be an inherent feature of instances and, by extension, capacity. The greedy algorithm selects items in the reverse
classes of computational problems, as opposed to a feature of order of their value-to-weight ratio and terminates once the
a particular computational model [46]. knapsack has reached capacity. That is, if the Sahni algorithm

is executed with k equal to 0, it uses the greedy algorithm to
fill the knapsack. This is the algorithmâ€™s proposed solution. If k

5. Com putation al com p | exity and human is equal to 1, then the algorithm considers subsets of cardinality
oe . 1, one for each of the items available, and extends these
decision-making subsets using the greedy algorithm. The proposed solution is