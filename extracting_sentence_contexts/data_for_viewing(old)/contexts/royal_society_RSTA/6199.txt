into a low-algorithmic-complexity network than the number necessary for transforming
a_low-algorithmic-complexity network into an algorithmically random network. This is
because (stochastically) random single-edge deletion on algorithmically simple networks has
a greater impact than (stochastically) random single-edge deletion on algorithmically random
networks [24]. On the one hand, to lower the algorithmic randomness of an algorithmically
random graph, non-stochastic single-edge deletion is required. On the other hand, to turn a low
algorithmic complexity network into a higher algorithmic complexity network, stochastically
random single-edge deletion suffices [27].

A formal observer system © is a particular type of FDDDS that has prior knowledge of a
formal theory and can simulate Turing machines (or compute functions) during its state space
trajectory. Thus, as demonstrated in [1, Section 3.2], whether or not a formal observer system can
compute a certain function is a fact dependent on the prior formal knowledge that the formal
observer system knows. This is an important property that we will explore in §3a. A direct
consequence of the definitions of algorithmic perturbation and formal observer system is that
they enable an algorithmic perturbation to change the machine that 0 is simulating ([1], Lemma
3.1). For example, suppose (9, ..., Or) is a state space trajectory that simulates a two-tape Turing



machine that computes the value of f(w1) when w is encoded as input in its first tape and the
second tape contains an encoding of a formal theory F, where f is a total computable function.
Then, suppose that an algorithmic perturbation occurs at time instant f, giving rise to the next
state 0}, instead of the original state O;,1, which was supposed to occur if no algorithmic
perturbation had happened at time instant t, so that O/,, is the initial state of the FDDDS that