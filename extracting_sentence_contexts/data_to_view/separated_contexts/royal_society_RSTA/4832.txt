Finitary universal computation is defined here as the set of computational properties that follow
from functional completeness. It includes the capacity to implement arbitrary mappings between
finite sets of arbitrarily large size using polynomial functions, a familiar property of Boolean
functions. This follows from the fact that functionally complete algebras A can implement any
f: A" > A with a polynomial for all n > 0, and hence can implement any function f’: A" > A”
component-wise for all m,n > 0. In the presence of SNAGs, there are many ways to implement finitary analogues of universal
computation, as we now explore, with new results in §4c. Frohlich’s theorem [60] states that every
function f: G > G with f(1) = 1 is a product of g(x) := axa" (inner automorphisms, a € G) under
pointwise multiplication if and only if G isa SNAG or has at most two elements.