This lively user community is important for recruiting personnel to our own efforts (there is a
growing pipeline of Coq experts), for disseminating our results to a large community that can mea)
appreciate and re-use them, and for making our students employable upon PhD graduation. :

(iv) Prior work on pervasive system verification :B

At the opposite end of the technical feasibility spectrum is the question of novelty. In 5&8
1989, Computational Logic, Inc. verified a hardware/software stack that included a gate- .
level description of a microprocessor, an assembler, linker, loader, two verified compilers, a
(highly idealized) operating system and some applications, with theorems connecting all these
components formulated and proven in Nqthm [37]. Obviously, system stacks in 2017 are orders
of magnitude more complex than those in 1989, and the need to modernize or re-examine many
of the formalizations was in fact proposed by Moore himself [38]. Although it is not entirely
inconceivable that such complexity could still be handled by a modern Boyer-Moore theorem
prover such as ACL2, we believe that the above-discussed features make Coq better suited to
manage these complexities.

More recently, the VERISOFT project combined proofs of processor and compiler correctness to
a verified stack linking a sequential subset of C to a gate-level description of the VAMP processor.
The textbook [39] describes material related to this project, and an article [40] outlines subsequent
work on memory invariants at the interface between a multicore hypervisor and C compilers.

The same team [41-43] also applied the VCC framework [44] to formally verify Hyper-V,
a widely deployed multiprocessor hypervisor by Microsoft consisting of 100 kLOC (thousand
lines of code) of concurrent C code and 5 kLOC of assembly. However, only 20% of the code is