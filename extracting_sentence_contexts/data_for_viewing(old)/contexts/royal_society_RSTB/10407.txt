ution of cost by weighting improvements with their SS
probability of occurrence y; affecting v; that is more likely to change [50]. In this case, the %
4 1 overall improvement of technology also follows a power-law a
= = -Ele|P(¢ <c) =—5Elc). (3.4) c(t) ~ 37)
The above equation has the following solution where d* = max{d7""} is the design complexity. Note that this 3
(0) equation recovers the homogeneous case when d* = d holds. 3
c(t) = Tre? xf}, (3.5) Over long timescales, the slowest-improving components with 5
d; = d* act as bottlenecks and they dominate the overall progress
where c(0) indicates the initial cost and the last term is an of technological change. Technological progress in hetero-
approximation when t — 0. That is, mature technologies will geneous systems is not always smooth and the system jumps
be more difficult to improve over long timescales because inno- between phases of stable and predictable changes and chaotic
vations take exponentially longer to achieve as cost decreases restructuring phases (or ‘learning bursts’).
(or performance increases). The abovementioned fact suggests how we can accelerate
This prediction assumes that there are no other bottlenecks the rate of technological improvement by simplifying designs.
slowing down the learning process. Real technological pro- There is no evidence of significant improvements in program-
gress is a more complex story, e.g. the number of transistors mer productivity, even when the best software practices
on microprocessors has not doubled very regularly and there (i.e. like ‘code refactorings’) engage in active simplification
are strong deviations from the exponential trend [13]. In of software structures [53]. But the sources of software com-
many cases, design complexity is a limiting factor for techno- plexity are not always exogenous. Common practices like
logical growth. For instance, computer operation involves the code reuse and recombination (which minimizes production
interactions between processor, memory and peripherals, and costs) can generate the scale-free structures commonly found
changes in any component might trigger a spurt of changes in software systems [54-56] (figure 4). These heterogeneous
in related technologies. Technologies are not isolated from structures are characterized by the presence of a few, highly
each other and the cost of improving any component depends connected elements (or ‘code hubs’) re-used by many other
on the costs of the components with which it interacts [51]. software components. It has been hypothesized that code