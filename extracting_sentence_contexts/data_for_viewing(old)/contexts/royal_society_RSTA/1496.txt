that is scalable to Exascale architectures. The result of the similarity matrix/graph computation
is then fed into a clustering algorithm that discovers the ultimate protein families. Since this
two-step process is often very expensive, single-step clustering algorithms [37] have gained in
popularity among those who do not have access to high-end computing equipment, despite often
resulting in fragmented clusters. We will not be focusing on those methods here because one of
the goals of the ExaBiome project is to improve accuracy by using Exascale computers.

The Markov Cluster (MCL) algorithm [38] is arguably the canonical graph-based algorithm
for clustering protein similarity matrices. The MCL algorithm treats this similarity matrix as
an adjacency matrix of the graph where vertices are proteins and edges are similarities. The
graph is sparse because only those similarities that are above a certain similarity threshold are
retained. MCL performs random walks from every vertex (protein) in the graph. It exploits the
fact that most of these walks will be trapped within tightly connected clusters, hence driving up
the probability mass that is accumulated within each cluster. In order to avoid densifying the
intermediate matrices and making the computation infeasible, MCL performs various pruning
strategies that are shown to not hurt the quality of the final clusters [39].

The simultaneous random walks directly map to a sparse matrix primitive that is commonly
known as SpGEMM, which computes the product of two sparse matrices. The high-performance
distributed re-implementation of the Markov Cluster algorithm, known as HipMCL [40], uses
some of the most general and scalable sparse matrix algorithms implemented within the
Combinatorial BLAS [41]. These algorithms include a two-dimensional SpGEMM algorithm
known as Sparse SUMMA [24], several different shared memory SpGEMM algorithms [42] that
are optimized for different iterations of HipMCL, a fast memory estimator based on sparse
matrix dense matrix multiplication for memory-efficient SpGEMM [43], as well as a very fast