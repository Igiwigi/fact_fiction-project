
— Global-local coherence. Coherence of the aggregate field computations in a distributed
execution is maintained for field calculus by tracking which nbr operations align with
one another, meaning that they are part of the same aggregate operation and should
share information via the field output by nbr. Determining alignment has a number
of subtleties stemming from the fact that execution may proceed differently on different
devices, and that any given function may be called multiple times. As a consequence, two
neighbouring devices may each evaluate a single nbr statement in the code many times,
with some of these evaluations aligning and sharing information, while others do not
align and remain isolated. Alignment is thus the local implementation of the aggregate
notion of a field’s domain, and the key to ensuring a provable relationship between

“In fact, it is sufficient to track only the values supplied to nbr operations and the context of those operations.


aggregate specification and local implementation. The minimal syntax of field calculus
has allowed its semantics, including alignment, to be proven correct and consistent [19].
— Self-stabilization. What kind of behavioural properties can we analyse given an arbitrary
field calculus program? This is quite a difficult problem when put in general terms,
especially since field calculus can embed any computable function as a built-in operator,
and hence suffers from the same undecidability properties of Turing machines. Isolating
fragments enjoying certain specific properties of interest is however possible, with the
potential of conceiving static analysis algorithms (and then, tools) supporting solid
system engineering on top. This is what has been done in [41], where a fragment
of the language in which constructs rep, nbr and built-in operator min-hood are